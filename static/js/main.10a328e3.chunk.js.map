{"version":3,"sources":["components/Admin.js","components/Button.js","components/Controls.js","components/data.js","components/ProgressBar.js","components/Countdown.js","components/SectionList.js","components/socket.js","components/App.js","index.js"],"names":["Admin","props","className","name","type","checked","control","onChange","controlHandler","connection","Button","onClick","id","text","Controls","tag","isPlaying","btnHandler","data","cycle","duration","section","ProgressBar","style","width","percent","Countdown","isSolo","curSection","Math","trunc","timer","SectionList","sections","map","classes","data-id","socket","io","App","useState","setIsPlaying","setTimer","setPercent","setCurSection","Date","startTime","setStartTime","setControl","setConnection","setIsSolo","useRef","startSection","server","stop","handleInput","event","target","btnSection","classList","contains","dataset","emit","updateTimer","length","elapsed","countdown","tempTime","setTime","getTime","useEffect","on","res","interval","setInterval","clearInterval","solo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10a328e3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Admin = (props) => {\r\n  return (\r\n    <div className=\"admin\">\r\n      {/* <label>\r\n        <input \r\n          name=\"solo-control\" \r\n          type=\"checkbox\"\r\n          checked={props.isSolo}\r\n          onChange={props.controlHandler}  \r\n        />\r\n        &nbsp;Solo? (ONLY tick when practicing by yourself. Page will NOT be updated by the server when ticked.)\r\n      </label><br/> */}\r\n      <label>\r\n        <input \r\n          name=\"client-control\" \r\n          type=\"checkbox\"\r\n          checked={props.control}\r\n          onChange={props.controlHandler}  \r\n        />\r\n        &nbsp;Control all clients?\r\n      </label>\r\n      <p>{props.connection}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Admin","import React from 'react'\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <button onClick={props.onClick} id={props.id}>\r\n      {props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\n\r\nimport Button from './Button'\r\n\r\nfunction Controls(props) {\r\n  const tag = props.control === true ? \" All\" : \"\"\r\n\r\n  return (\r\n    <div className={ props.control === true ? \"controls all\" : \"controls\"}>\r\n      <Button \r\n        text={props.isPlaying ? \"Stop\" + tag : \"Start\" + tag} \r\n        onClick={props.btnHandler}\r\n        id=\"local\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Controls","const data = [\r\n  {\r\n    cycle: 0,\r\n    duration: 10,\r\n    id: 0,\r\n    section: \"Countdown\",\r\n  },\r\n  {\r\n    cycle: 1,\r\n    duration: 30,\r\n    id: 1,\r\n    section: \"Ascent\",\r\n  },\r\n  {\r\n    cycle: 1,\r\n    duration: 20,\r\n    id: 2,\r\n    section: \"Soaring\",\r\n  },\r\n  {\r\n    cycle: 1,\r\n    duration: 30,\r\n    id: 3,\r\n    section: \"Descent\",\r\n  },\r\n  {\r\n    cycle: 1,\r\n    duration: 20,\r\n    id: 4,\r\n    section: \"Lament\",\r\n  },\r\n  {\r\n    cycle: 2,\r\n    duration: 20,\r\n    id: 5,\r\n    section: \"Ascent\",\r\n  },\r\n  {\r\n    cycle: 2,\r\n    duration: 15,\r\n    id: 6,\r\n    section: \"Soaring\",\r\n  },\r\n  {\r\n    cycle: 2,\r\n    duration: 20,\r\n    id: 7,\r\n    section: \"Descent\",\r\n  },\r\n  {\r\n    cycle: 2,\r\n    duration: 15,\r\n    id: 8,\r\n    section: \"Lament\",\r\n  },\r\n  {\r\n    cycle: 3,\r\n    duration: 10,\r\n    id: 9,\r\n    section: \"Ascent\",\r\n  },\r\n  {\r\n    cycle: 3,\r\n    duration: 5,\r\n    id: 10,\r\n    section: \"Soaring\",\r\n  },\r\n  {\r\n    cycle: 3,\r\n    duration: 10,\r\n    id: 11,\r\n    section: \"Descent\",\r\n  },\r\n  {\r\n    cycle: 3,\r\n    duration: 5,\r\n    id: 12,\r\n    section: \"Lament\",\r\n  },\r\n  {\r\n    cycle: 4,\r\n    duration: 5,\r\n    id: 13,\r\n    section: \"Ascent\",\r\n  },\r\n  {\r\n    cycle: 4,\r\n    duration: 2,\r\n    id: 14,\r\n    section: \"Soaring\",\r\n  },\r\n  {\r\n    cycle: 4,\r\n    duration: 5,\r\n    id: 15,\r\n    section: \"Descent\",\r\n  },\r\n  {\r\n    cycle: 4,\r\n    duration: 2,\r\n    id: 16,\r\n    section: \"Lament\",\r\n  },\r\n  {\r\n    cycle: 5,\r\n    duration: 3,\r\n    id: 17,\r\n    section: \"Ascent\",\r\n  },\r\n  {\r\n    cycle: 5,\r\n    duration: 1,\r\n    id: 18,\r\n    section: \"Soaring\",\r\n  },\r\n  {\r\n    cycle: 6,\r\n    duration: 2,\r\n    id: 19,\r\n    section: \"*Ascent*\",\r\n  },\r\n]\r\n\r\nexport default data","import React from 'react'\r\n\r\nfunction ProgressBar(props) {\r\n\r\n  return (\r\n    <div className=\"progress_container\">\r\n      <div \r\n        id=\"progress-bar\" \r\n        className=\"progress\"\r\n        style={{ width: props.percent * 100 + \"%\" }}\r\n      > \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBar","import React from 'react'\r\n\r\nimport data from './data'\r\nimport ProgressBar from './ProgressBar'\r\n\r\nfunction Countdown(props) {\r\n  return (\r\n    <div className=\"countdown\">\r\n      {\r\n        props.isSolo ? \r\n          <p className=\"red\">SOLO MODE: Uncheck box at bottom for the performance.</p> :\r\n          null\r\n      }\r\n      \r\n      <p className=\"section_title\">\r\n        {data[props.curSection]?.section}&nbsp;\r\n        {data[props.curSection]?.cycle}&nbsp;\r\n        ({data[props.curSection]?.duration}\")\r\n      </p>\r\n      <p className=\"timer\">\r\n        {Math.trunc(props.timer * 10) / 10} seconds\r\n      </p>\r\n      <ProgressBar percent={props.percent}/>\r\n      <p className=\"section_next\">\r\n        Next: <b>{data[props.curSection+1]?.section}&nbsp;\r\n              {data[props.curSection+1]?.cycle}&nbsp;\r\n              ({data[props.curSection+1]?.duration}\")</b>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countdown","import React from 'react'\r\n\r\nimport data from './data'\r\n\r\nconst SectionList = (props) => {\r\n  const sections = data.map(section => {\r\n    let classes = \"btn-link \"\r\n    if (props.curSection === section.id) {\r\n      classes += \"current\"\r\n    }\r\n    if (props.curSection > section.id) {\r\n      classes += \"completed\"\r\n    }\r\n    return (\r\n      <li key={section.id}>\r\n        <button \r\n          className={classes} \r\n          onClick={props.btnHandler}\r\n          data-id={section.id}\r\n        >\r\n          {section.section}&nbsp;\r\n          {section.cycle}&nbsp;\r\n          ({section.duration}\")\r\n        </button>\r\n      </li>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"section_list\">\r\n      <ol>\r\n        { sections }\r\n      </ol>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SectionList","import io from 'socket.io-client'\r\n//const ENDPOINT = 'http://127.0.0.1:4001'\r\nconst ENDPOINT = \"https://pacific-beyond-27860.herokuapp.com/\"\r\nexport const socket = io(ENDPOINT)","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Admin from './Admin'\r\nimport Controls from './Controls'\r\nimport Countdown from './Countdown'\r\nimport SectionList from './SectionList'\r\nimport { socket } from './socket'\r\n\r\nimport './App.css'\r\nimport data from './data'\r\n\r\nfunction App() {\r\n  const [isPlaying, setIsPlaying] = useState(false)\r\n  const [timer, setTimer] = useState(data[0].duration)\r\n  const [percent, setPercent] = useState(0)\r\n  const [curSection, setCurSection] = useState(0)\r\n  const [startTime, setStartTime] = useState(new Date())\r\n  const [control, setControl] = useState(false)\r\n  const [connection, setConnection] = useState(\"Not connected to server.\")\r\n  const [isSolo, setIsSolo] = useState(false);\r\n\r\n  const requestRef = useRef()\r\n  const previousTimeRef = useRef()\r\n\r\n  const [test, setTest] = useState(0)\r\n  \r\n  /*const animate = time => {\r\n    if (previousTimeRef.current != undefined) {\r\n      updateTimer()\r\n    }\r\n    previousTimeRef.current = time\r\n    requestRef.current = requestAnimationFrame(animate)\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestRef.current = requestAnimationFrame(animate)\r\n    return () => cancelAnimationFrame(requestRef.current)\r\n  }, [curSection, isPlaying])*/\r\n\r\n  useEffect(() => {\r\n    socket.on(\"Hello\", (res) => setConnection(res + \" client(s) connected to server :)\"))\r\n    \r\n    socket.on(\"Start\", (res) => startSection(res, true))\r\n    socket.on(\"Stop\", () => stop(true))\r\n\r\n  }, [])\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(updateTimer, 33)\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  })\r\n\r\n  function startSection(section, server=false) {\r\n    if (server) {\r\n      if (isSolo) return;\r\n    }\r\n\r\n    setTimer(data[section].duration)\r\n    setPercent(0)\r\n    setCurSection(section)\r\n    setStartTime(new Date())\r\n    setIsPlaying(true)\r\n  }\r\n\r\n  function stop(server=false) {\r\n    if (server) {\r\n      if (isSolo) return;\r\n    }\r\n\r\n    setTimer(data[0].duration)\r\n    setPercent(0)\r\n    setCurSection(0)\r\n    setStartTime(new Date())\r\n    setIsPlaying(false)\r\n  }\r\n\r\n  function handleInput(event) {\r\n    if (event.target.type === \"checkbox\") {\r\n      if (event.target.name === \"client-control\") {\r\n        setControl(!control)\r\n      } else if (event.target.name === \"solo-control\") {\r\n        setIsSolo(!isSolo)\r\n      }\r\n      return\r\n    }\r\n\r\n    let btnSection = 0\r\n    if (event.target.classList.contains('btn-link')) {\r\n      btnSection = +event.target.dataset.id\r\n\r\n      if (control) {\r\n        socket.emit(\"Start\", btnSection)\r\n        return\r\n      }\r\n\r\n      startSection(btnSection)\r\n      return\r\n    }\r\n\r\n    if (control) {\r\n      isPlaying ? socket.emit(\"Stop\") \r\n                : socket.emit(\"Start\", btnSection)\r\n      return\r\n    }\r\n\r\n    isPlaying ? setIsPlaying(false)\r\n              : startSection(btnSection)\r\n  }\r\n\r\n  function updateTimer() {\r\n    if (!isPlaying || curSection >= data.length) {\r\n      stop()\r\n      return;\r\n    }\r\n\r\n    const now = new Date()\r\n    const elapsed = now - startTime\r\n    let countdown = data[curSection].duration - (elapsed/1000)\r\n    \r\n    if (countdown <= 0) {\r\n      setCurSection(curSection + 1)\r\n      let tempTime = startTime\r\n      tempTime.setTime(tempTime.getTime() + (data[curSection].duration * 1000))\r\n      setStartTime(tempTime)\r\n      countdown += data[curSection].duration\r\n    }\r\n\r\n    setPercent(elapsed / (data[curSection].duration * 1000))\r\n    setTimer(countdown)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Countdown \r\n        isPlaying={isPlaying} \r\n        isSolo={isSolo}\r\n        curSection={curSection}\r\n        timer={timer}\r\n        percent={percent}\r\n      />\r\n      <Controls \r\n        isPlaying={isPlaying} \r\n        btnHandler={handleInput} \r\n        control={control}\r\n      />\r\n      <SectionList \r\n        btnHandler={handleInput}\r\n        curSection={curSection}\r\n      />\r\n      <Admin \r\n        control={control}\r\n        solo={isSolo}\r\n        controlHandler={handleInput}\r\n        connection={connection} \r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}